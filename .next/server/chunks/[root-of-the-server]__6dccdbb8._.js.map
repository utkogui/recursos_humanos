{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/utko/Documents/Documents%20-%20MacBook%20Air%20de%20Guiliherme/rh-matilha/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///Users/utko/Documents/Documents%20-%20MacBook%20Air%20de%20Guiliherme/rh-matilha/src/app/api/ferias/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\n// GET - Listar todas as férias\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const status = searchParams.get('status')\n    const colaboradorId = searchParams.get('colaboradorId')\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const skip = (page - 1) * limit\n\n    // Construir filtros\n    const where: any = {}\n    \n    if (status && status !== 'todos') {\n      where.status = status\n    }\n    \n    if (colaboradorId) {\n      where.colaboradorId = parseInt(colaboradorId)\n    }\n\n    // Buscar férias com paginação e dados do colaborador\n    const [ferias, total] = await Promise.all([\n      prisma.ferias.findMany({\n        where,\n        skip,\n        take: limit,\n        include: {\n          colaborador: {\n            select: {\n              id: true,\n              nome: true,\n              cargo: true,\n              departamento: true\n            }\n          }\n        },\n        orderBy: { dataInicio: 'desc' },\n      }),\n      prisma.ferias.count({ where })\n    ])\n\n    return NextResponse.json({\n      ferias,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    })\n  } catch (error) {\n    console.error('Erro ao buscar férias:', error)\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    )\n  }\n}\n\n// POST - Criar nova solicitação de férias\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // Validar dados obrigatórios\n    const requiredFields = ['colaboradorId', 'dataInicio', 'dataFim']\n    for (const field of requiredFields) {\n      if (!body[field]) {\n        return NextResponse.json(\n          { error: `Campo obrigatório: ${field}` },\n          { status: 400 }\n        )\n      }\n    }\n\n    // Verificar se o colaborador existe\n    const colaborador = await prisma.colaborador.findUnique({\n      where: { id: parseInt(body.colaboradorId) }\n    })\n\n    if (!colaborador) {\n      return NextResponse.json(\n        { error: 'Colaborador não encontrado' },\n        { status: 404 }\n      )\n    }\n\n    // Converter datas\n    const dataInicio = new Date(body.dataInicio)\n    const dataFim = new Date(body.dataFim)\n\n    // Verificar se a data de fim é posterior à data de início\n    if (dataFim <= dataInicio) {\n      return NextResponse.json(\n        { error: 'A data de fim deve ser posterior à data de início' },\n        { status: 400 }\n      )\n    }\n\n    // Verificar se já existe férias no período\n    const feriasExistentes = await prisma.ferias.findFirst({\n      where: {\n        colaboradorId: parseInt(body.colaboradorId),\n        OR: [\n          {\n            AND: [\n              { dataInicio: { lte: dataInicio } },\n              { dataFim: { gte: dataInicio } }\n            ]\n          },\n          {\n            AND: [\n              { dataInicio: { lte: dataFim } },\n              { dataFim: { gte: dataFim } }\n            ]\n          },\n          {\n            AND: [\n              { dataInicio: { gte: dataInicio } },\n              { dataFim: { lte: dataFim } }\n            ]\n          }\n        ]\n      }\n    })\n\n    if (feriasExistentes) {\n      return NextResponse.json(\n        { error: 'Já existe férias cadastrada para este período' },\n        { status: 400 }\n      )\n    }\n\n    // Criar solicitação de férias\n    const ferias = await prisma.ferias.create({\n      data: {\n        colaboradorId: parseInt(body.colaboradorId),\n        dataInicio,\n        dataFim,\n        tipoFerias: body.tipoFerias || 'ferias_anuais',\n        observacoes: body.observacoes,\n        status: 'pendente'\n      },\n      include: {\n        colaborador: {\n          select: {\n            id: true,\n            nome: true,\n            cargo: true,\n            departamento: true\n          }\n        }\n      }\n    })\n\n    return NextResponse.json(ferias, { status: 201 })\n  } catch (error) {\n    console.error('Erro ao criar férias:', error)\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}